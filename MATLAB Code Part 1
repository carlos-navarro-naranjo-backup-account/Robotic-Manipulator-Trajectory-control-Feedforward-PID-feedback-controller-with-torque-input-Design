clc
clear
t_f = 3; % total time (i.e., total time = n*h)
h = 0.1; % step size
n = (t_f/h)+1; % total number of iterations
ed = 0.001; %Desired error

%pre-allocation
th = zeros(2,n);
p = zeros(2,n);
xd = zeros(2,n);
e = zeros(2,n);
error = zeros(n,1);
t = [0:h:3];

% Initialization 
th(:,1) = [(pi/6), (pi/6)]';
e(:,1) = [2, 3-t(1)]'-xend(th(:,1)); % Define error vector
error(1) = norm(e(:,1)); % Calculate the error as the vector norm of e
% Update 'th' until the error condition is satisfied
q(:,1)= xend(th(:,1));
p(:,1)= th(:,1);
iter=0; 
 for i = 2:n
     th(:,i) = th(:,i-1);
     e(:,i) = e(:,i-1); % Define error vector
     error(i) = error(i-1); % Define error vector
     while error(i) > ed        
        iter = iter+1;       
        th(:,i) = th(:,i) + inv(CoordJac(th(:,i)))*e(:,i);
        e(:,i) = [2, 3-t(i)]'-xend(th(:,i));
        error(i) = norm(e(:,i));
     end
    
     q(:,i)= xend(th(:,i));
     p(:,i)= th(:,i);
     
 end
 
%Plotting
hold on
plot(t, p(1,:), "r*")
plot(t, p(2,:), "k*")
xlabel('time (t)')
ylabel('\Theta: joint trajectories')
hold off

legend({'theta_1(t)', 'theta_2(t)'}, 'Location', 'northeast', 'NumColumns', 1)
figure
hold on
plot(g(1,:), g(2,:), "r*")
xlabel('x_end- x component')
ylabel('y_end- y component')
hold off

legend({'end effector trajectory'}, 'Location', 'northeast', 'NumColumns', 1)

%Functions used
function Jacob = CoordJac(angle)
L_1=3;
L_2=2;
Jacob = [(-L_1*sin(angle(1)))-(L_2*sin(angle(1)+angle(2))), -L_2*sin(angle(1)+angle(2));
    (L_1*cos(angle(1)))+(L_2*cos(angle(1)+ angle(2))),   L_2*cos(angle(1)+ angle(2))];
end

function x3 = xend(angle)
L_1=3;
L_2=2;
x3 = [(L_1*cos(angle(1)))+(L_2*cos(angle(1)+angle(2))); (L_1*sin(angle(1)))+(L_2*sin(angle(1)+angle(2)))];
end


